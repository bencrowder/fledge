#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse
from cmd2 import Cmd

from fledge import fledge

class FledgeShell(Cmd):
    controller = None
    prompt = 'fledge> '

    Cmd.shortcuts.update({'q': 'quit'})
    editor = 'vim'

    def default(self, arg):
        # Get the keyword
        keyword = arg.split(' ')[0]

        self.controller.parse_line(arg)

    # Print 
    def do_help(self, arg):
        if arg == '':
            print ""
            print "  Fledge commands:"
            print "    Selection: with, select, deselect"
            print "    General: print, list, convert"
            print "    Files: copy, move, rename"
            print "    Text: replace, split, append, prepend, trim"
            print "    Images: resize, rotate, flip"
            print ""
            print "  Shell-specific commands:"
            print "    edit, help, history, list, load, save, shell, quit"
            print ""

        else:
            # Try importing the action
            name = 'action_%s' % arg

            try:
                actions = __import__("fledge.actions.%s" % name, fromlist=[name])
                action = getattr(actions, name)
            except ImportError:
                print "Error importing that action"

            if action and callable(action):
                print action.__doc__

    # Quitting
    def do_quit(self, arg):
        return True


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("file", nargs="?", help="script file")
    parser.add_argument("-v", "--verbose", help="verbose mode", action="store_true")
    parser.add_argument("-n", "--dry-run", help="dry run (don't actually execute)", action="store_true")
    args = parser.parse_args()

    if args.file:
        if os.path.exists(args.file):
            fl = fledge.Fledge(args.file)
            fl.parse()
        else:
            print "File doesn't exist"
    else:
        fshell = FledgeShell()
        fshell.controller = fledge.Fledge()
        fshell.cmdloop()
